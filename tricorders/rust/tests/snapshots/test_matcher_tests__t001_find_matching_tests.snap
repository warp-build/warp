---
source: tricorders/rust/tests/test_matcher_tests.rs
expression: "format!(\"{:#?}\", & source)"
---
"#![feature(prelude_import)]\n#![no_std]\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\npub fn add_two(a: i32) -> i32 { a + 2 }\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    extern crate test;\n    #[cfg(test)]\n    #[rustc_test_marker = \"tests::add_two_and_two\"]\n    pub const add_two_and_two: test::TestDescAndFn =\n        test::TestDescAndFn {\n            desc: test::TestDesc {\n                name: test::StaticTestName(\"tests::add_two_and_two\"),\n                ignore: false,\n                ignore_message: ::core::option::Option::None,\n                source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n                start_line: 10usize,\n                start_col: 8usize,\n                end_line: 10usize,\n                end_col: 23usize,\n                compile_fail: false,\n                no_run: false,\n                should_panic: test::ShouldPanic::No,\n                test_type: test::TestType::Unknown,\n            },\n            testfn: test::StaticTestFn(||\n                    test::assert_test_result(add_two_and_two())),\n        };\n    fn add_two_and_two() {\n\n\n\n\n\n        match (&4, &add_two(2)) {\n            (left_val, right_val) => {\n                if !(*left_val == *right_val) {\n                        let kind = ::core::panicking::AssertKind::Eq;\n                        ::core::panicking::assert_failed(kind, &*left_val,\n                            &*right_val, ::core::option::Option::None);\n                    }\n            }\n        };\n    }\n    extern crate test;\n    #[cfg(test)]\n    #[rustc_test_marker = \"tests::add_three_and_two\"]\n    pub const add_three_and_two: test::TestDescAndFn =\n        test::TestDescAndFn {\n            desc: test::TestDesc {\n                name: test::StaticTestName(\"tests::add_three_and_two\"),\n                ignore: false,\n                ignore_message: ::core::option::Option::None,\n                source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n                start_line: 15usize,\n                start_col: 8usize,\n                end_line: 15usize,\n                end_col: 25usize,\n                compile_fail: false,\n                no_run: false,\n                should_panic: test::ShouldPanic::No,\n                test_type: test::TestType::Unknown,\n            },\n            testfn: test::StaticTestFn(||\n                    test::assert_test_result(add_three_and_two())),\n        };\n    fn add_three_and_two() {\n        match (&5, &add_two(3)) {\n            (left_val, right_val) => {\n                if !(*left_val == *right_val) {\n                        let kind = ::core::panicking::AssertKind::Eq;\n                        ::core::panicking::assert_failed(kind, &*left_val,\n                            &*right_val, ::core::option::Option::None);\n                    }\n            }\n        };\n    }\n    extern crate test;\n    #[cfg(test)]\n    #[rustc_test_marker = \"tests::one_hundred\"]\n    pub const one_hundred: test::TestDescAndFn =\n        test::TestDescAndFn {\n            desc: test::TestDesc {\n                name: test::StaticTestName(\"tests::one_hundred\"),\n                ignore: false,\n                ignore_message: ::core::option::Option::None,\n                source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n                start_line: 20usize,\n                start_col: 8usize,\n                end_line: 20usize,\n                end_col: 19usize,\n                compile_fail: false,\n                no_run: false,\n                should_panic: test::ShouldPanic::No,\n                test_type: test::TestType::Unknown,\n            },\n            testfn: test::StaticTestFn(||\n                    test::assert_test_result(one_hundred())),\n        };\n    fn one_hundred() {\n        let res = super::add_two(100);\n        match (&102, &res) {\n            (left_val, right_val) => {\n                if !(*left_val == *right_val) {\n                        let kind = ::core::panicking::AssertKind::Eq;\n                        ::core::panicking::assert_failed(kind, &*left_val,\n                            &*right_val, ::core::option::Option::None);\n                    }\n            }\n        };\n    }\n}\nextern crate test;\n#[cfg(test)]\n#[rustc_test_marker = \"no_mod_test_1\"]\npub const no_mod_test_1: test::TestDescAndFn =\n    test::TestDescAndFn {\n        desc: test::TestDesc {\n            name: test::StaticTestName(\"no_mod_test_1\"),\n            ignore: false,\n            ignore_message: ::core::option::Option::None,\n            source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n            start_line: 27usize,\n            start_col: 4usize,\n            end_line: 27usize,\n            end_col: 17usize,\n            compile_fail: false,\n            no_run: false,\n            should_panic: test::ShouldPanic::No,\n            test_type: test::TestType::Unknown,\n        },\n        testfn: test::StaticTestFn(||\n                test::assert_test_result(no_mod_test_1())),\n    };\nfn no_mod_test_1() {\n    match (&4, &add_two(2)) {\n        (left_val, right_val) => {\n            if !(*left_val == *right_val) {\n                    let kind = ::core::panicking::AssertKind::Eq;\n                    ::core::panicking::assert_failed(kind, &*left_val,\n                        &*right_val, ::core::option::Option::None);\n                }\n        }\n    };\n}\nextern crate test;\n#[cfg(test)]\n#[rustc_test_marker = \"no_mod_test_2\"]\npub const no_mod_test_2: test::TestDescAndFn =\n    test::TestDescAndFn {\n        desc: test::TestDesc {\n            name: test::StaticTestName(\"no_mod_test_2\"),\n            ignore: false,\n            ignore_message: ::core::option::Option::None,\n            source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n            start_line: 32usize,\n            start_col: 4usize,\n            end_line: 32usize,\n            end_col: 17usize,\n            compile_fail: false,\n            no_run: false,\n            should_panic: test::ShouldPanic::No,\n            test_type: test::TestType::Unknown,\n        },\n        testfn: test::StaticTestFn(||\n                test::assert_test_result(no_mod_test_2())),\n    };\nfn no_mod_test_2() {\n    match (&5, &add_two(3)) {\n        (left_val, right_val) => {\n            if !(*left_val == *right_val) {\n                    let kind = ::core::panicking::AssertKind::Eq;\n                    ::core::panicking::assert_failed(kind, &*left_val,\n                        &*right_val, ::core::option::Option::None);\n                }\n        }\n    };\n}\nextern crate test;\n#[cfg(test)]\n#[rustc_test_marker = \"add_4_and_two\"]\npub const add_4_and_two: test::TestDescAndFn =\n    test::TestDescAndFn {\n        desc: test::TestDesc {\n            name: test::StaticTestName(\"add_4_and_two\"),\n            ignore: false,\n            ignore_message: ::core::option::Option::None,\n            source_file: \"./tests/sources/t003_lib_with_tests.rs\",\n            start_line: 37usize,\n            start_col: 4usize,\n            end_line: 37usize,\n            end_col: 17usize,\n            compile_fail: false,\n            no_run: false,\n            should_panic: test::ShouldPanic::No,\n            test_type: test::TestType::Unknown,\n        },\n        testfn: test::StaticTestFn(||\n                test::assert_test_result(add_4_and_two())),\n    };\nfn add_4_and_two() {\n    match (&6, &add_two(4)) {\n        (left_val, right_val) => {\n            if !(*left_val == *right_val) {\n                    let kind = ::core::panicking::AssertKind::Eq;\n                    ::core::panicking::assert_failed(kind, &*left_val,\n                        &*right_val, ::core::option::Option::None);\n                }\n        }\n    };\n}\n#[rustc_main]\npub fn main() -> () {\n    extern crate test;\n    test::test_main_static(&[&add_4_and_two, &no_mod_test_1, &no_mod_test_2,\n                    &add_three_and_two, &add_two_and_two, &one_hundred])\n}\n"
