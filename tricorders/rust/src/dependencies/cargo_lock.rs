use serde::{Deserialize, Deserializer};
use serde_repr::Deserialize_repr;
use std::path::Path;
use thiserror::Error;

const CARGO_LOCK_PREFIX: &str = r#"# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
"#;

#[derive(Default, Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Deserialize)]
pub struct CargoLock {
    #[serde(default)]
    version: Version,
    #[serde(default, rename = "package")]
    packages: Vec<Package>,
}

impl CargoLock {
    pub async fn from_path(path: impl AsRef<Path>) -> Result<Self, CargoLockError> {
        let toml = tokio::fs::read_to_string(path.as_ref()).await?;
        Self::from_str(&toml)
    }

    pub fn from_str(toml: &str) -> Result<Self, CargoLockError> {
        let toml = toml.trim().strip_prefix(CARGO_LOCK_PREFIX).unwrap();
        Ok(toml::from_str(toml)?)
    }

    pub fn version(&self) -> &Version {
        &self.version
    }

    pub fn packages(&self) -> &[Package] {
        self.packages.as_ref()
    }
}

#[derive(Default, Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Deserialize_repr)]
#[repr(u8)]
pub enum Version {
    #[default]
    V3 = 3,
}

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Deserialize)]
pub struct Package {
    #[serde(default)]
    name: String,
    version: semver::Version,
    #[serde(default)]
    source: String,
    #[serde(default)]
    checksum: String,
    #[serde(default)]
    dependencies: Vec<Dependency>,
}

impl Package {
    pub fn name(&self) -> &str {
        self.name.as_ref()
    }

    pub fn version(&self) -> &semver::Version {
        &self.version
    }

    pub fn source(&self) -> &str {
        self.source.as_ref()
    }

    pub fn checksum(&self) -> &str {
        self.checksum.as_ref()
    }

    pub fn dependencies(&self) -> &[Dependency] {
        self.dependencies.as_ref()
    }
}

#[derive(Default, Debug, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub struct Dependency {
    name: String,
    version: Option<String>,
}

impl Dependency {
    pub fn name(&self) -> &str {
        self.name.as_ref()
    }

    pub fn version(&self) -> Option<&String> {
        self.version.as_ref()
    }
}

impl<'de> Deserialize<'de> for Dependency {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let dep = String::deserialize(de)?;

        if dep.contains(' ') {
            let parts = dep.split(' ').collect::<Vec<&str>>();
            Ok(Self {
                name: parts[0].to_string(),
                version: Some(parts[1].to_string()),
            })
        } else {
            Ok(Self {
                name: dep,
                version: None,
            })
        }
    }
}

#[derive(Error, Debug)]
pub enum CargoLockError {
    #[error(transparent)]
    TomlError(toml::de::Error),

    #[error(transparent)]
    FileError(std::io::Error),
}

impl From<toml::de::Error> for CargoLockError {
    fn from(value: toml::de::Error) -> Self {
        CargoLockError::TomlError(value)
    }
}

impl From<std::io::Error> for CargoLockError {
    fn from(value: std::io::Error) -> Self {
        CargoLockError::FileError(value)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn parses_cargo_lock() {
        let lockfile = CargoLock::from_str(
            r#"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "anyhow"
version = "1.0.68"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2cb2f989d18dd141ab8ae82f64d1a8cdd37e0840f73a406896cf5e99502fab61"

[[package]]
name = "async-stream"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dad5c83079eae9969be7fadefe640a1c566901f05ff91ab221de4b6f68d9507e"
dependencies = [
 "async-stream-impl",
 "futures-core",
]

[[package]]
name = "tempfile"
version = "3.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "af18f7ae1acd354b992402e9ec5864359d693cd8a79dcbef59f76891701c1e95"
dependencies = [
 "cfg-if",
 "fastrand",
 "redox_syscall",
 "rustix",
 "windows-sys 0.42.0",
]
"#,
        )
        .unwrap();

        dbg!(&lockfile);
        assert_eq!(lockfile.packages().len(), 3);

        let pkg = lockfile.packages().get(0).unwrap();
        assert_eq!(pkg.name(), "anyhow");
        assert_eq!(pkg.version().to_string(), "1.0.68".to_string());
        assert_eq!(
            pkg.source(),
            "registry+https://github.com/rust-lang/crates.io-index"
        );
        assert_eq!(
            pkg.checksum(),
            "2cb2f989d18dd141ab8ae82f64d1a8cdd37e0840f73a406896cf5e99502fab61"
        );
        assert!(pkg.dependencies().is_empty());

        let pkg = lockfile.packages().get(1).unwrap();
        assert_eq!(pkg.name(), "async-stream");
        assert_eq!(pkg.version().to_string(), "0.3.3".to_string());
        assert_eq!(
            pkg.source(),
            "registry+https://github.com/rust-lang/crates.io-index"
        );
        assert_eq!(
            pkg.checksum(),
            "dad5c83079eae9969be7fadefe640a1c566901f05ff91ab221de4b6f68d9507e"
        );
        assert_eq!(
            pkg.dependencies(),
            vec![
                Dependency {
                    name: "async-stream-impl".to_string(),
                    version: None
                },
                Dependency {
                    name: "futures-core".to_string(),
                    version: None
                }
            ]
        );

        let pkg = lockfile.packages().get(2).unwrap();
        assert_eq!(pkg.name(), "tempfile");
        assert_eq!(pkg.version().to_string(), "3.4.0".to_string());
        assert_eq!(
            pkg.source(),
            "registry+https://github.com/rust-lang/crates.io-index"
        );
        assert_eq!(
            pkg.checksum(),
            "af18f7ae1acd354b992402e9ec5864359d693cd8a79dcbef59f76891701c1e95"
        );
        assert_eq!(
            pkg.dependencies(),
            vec![
                Dependency {
                    name: "cfg-if".to_string(),
                    version: None
                },
                Dependency {
                    name: "fastrand".to_string(),
                    version: None
                },
                Dependency {
                    name: "redox_syscall".to_string(),
                    version: None
                },
                Dependency {
                    name: "rustix".to_string(),
                    version: None
                },
                Dependency {
                    name: "windows-sys".to_string(),
                    version: Some("0.42.0".to_string())
                }
            ]
        );
    }
}
