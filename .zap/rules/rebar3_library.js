import ElixirToolchain, {BEAM_EXT} from "../toolchains/elixir.js";

const MIX_TEMPLATE = ({name}) => `

# NOTE: This file generated by Zap.

# This file is only used by Telemetry as a dependency.
# Use rebar3 instead for compiling, running tests, etc.
defmodule ${name[0].toUpperCase() + name.slice(1)}.MixProject do
  use Mix.Project

  {:ok, [{:application, :${name}, props}]} = :file.consult("src/${name}.app.src")
  @props Keyword.take(props, [:applications, :description, :env, :mod, :vsn])

  def application do
    @props
  end

  def project do
    [
      app: :${name},
      version: to_string(application()[:vsn]),
      language: :erlang
    ]
  end
end

`

const impl = ctx => {
  const { label, name, deps, srcs, } = ctx.cfg();
  const cwd = Label.path(label)

  const mixFile = `${cwd}/mix.exs`
  const srcTarball = `${name}.src.tar`
  const appTarball = `${name}.app.tar`
  const outputs = [
    `${cwd}/${srcTarball}`,
    `${cwd}/${appTarball}`,
    mixFile
    ]
  ctx.action().declareOutputs(outputs);

  ctx.action().writeFile({
    dst: mixFile,
    data: MIX_TEMPLATE({name})
  })

  const { MIX } = ElixirToolchain.provides()
  ctx.action().runShell({
    script: `#!/bin/bash -xe

export MIX_ENV=prod
cd ${cwd}
tar cf ${srcTarball} . \
&& ${MIX} deps.get \
&& ${MIX} compile \
&& tar cf ${appTarball} _build/dev/lib/${name}

`,
  })
};

export default Zap.Rule({
  name: "rebar3_library",
  mnemonic: "Rebar3Lib",
  impl,
  cfg: {
    name: label(),
    srcs: [file()],
  },
	defaults: {
    srcs: [
      "c_src/**/*",
      "src/**/*.app.src",
      "src/**/*.erl",
      "src/**/*.hrl",
      "include/**/*.hrl",
    ],
	},
  toolchains: [ElixirToolchain]
});

