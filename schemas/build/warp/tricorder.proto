syntax = "proto3";
package build.warp.tricorder;

import "schemas/build/warp/common.proto";

// A TricorderService is a repository and code analysis service created for a
// specific language ecosystem that will be started and managed from within
// Warp. It helps Warp understand how an ecosystem works.
//
service TricorderService {
  // Returns whether the service is ready to take further requests.
  //
  // Since we are initializing tricorder services from within warp as separate
  // processes, we need a signal to tell us that it is indeed ready.
  //
  rpc EnsureReady(EnsureReadyRequest) returns (EnsureReadyResponse);

  // Scan and return a list of dependencies. Typically this is done by looking
  // for package manifests and lock files, but it may include scanning folders
  // and other vendored artifacts.
  //
  rpc GetDependencies(GetDependenciesRequest) returns (GetDependenciesResponse);

  // Generates a Warp Signature for a given source and symbol. This is used
  // during the Target Resolution phase, to understand how to build, test, or
  // run a given target.
  //
  // The entirety of the repository is normally available to this rpc, but the
  // signature is expected to correspond to a single path, be it a file or a
  // directory.
  //
  // A list of dependencies will be provided to facilitate the analysis of code
  // in case that paths to 3rd party dependencies are required. For example, in
  // languages with preprocessors that require the inclusion of header files,
  // this list of dependencies will include information about the paths where
  // those header files may reside.
  //
  rpc GenerateSignature(GenerateSignatureRequest) returns (GenerateSignatureResponse);
}

message EnsureReadyRequest {}
message EnsureReadyResponse {}

message GetDependenciesRequest {
  // The root of the workspace that the Tricorder will be analyzing.
  //
  string workspace_root = 1;

  // A number of dependency profiles, typically used to segment dependencies
  // into development time, testing time, and production dependencies.
  //
  // If there are no profiles specified, all dependencies will be expected.
  //
  repeated string profiles = 2;
}

message GetDependenciesResponse {
  // The status of this operation. If any errors ocurred, you can expect the
  // rest of these fields to be unset.
  //
  Status status = 1;

  // The root of the workspace that the tricorder analyzed.
  string workspace_root = 2;

  // The list of profiles used during analysis.
  repeated string profiles = 3;

  // A list of dependencies found in the specified workspace root, for the
  // specified profiles.
  //
  repeated Dependency dependencies = 4;
}

message GenerateSignatureRequest {
  // The root of the workspace that the Tricorder will be analyzing.
  //
  string workspace_root = 1;

  // The path to the file that this signature corresponds to. This path will be
  // relative to the `workspace_root`.
  //
  string file = 2;

  // The symbol that the generated signature should include.
  //
  // This symbol is a string that matches a value that is semantically
  // meaningful in the context of the tricorder's language. For example, in the
  // Erlang tricorder we expect a symbol to be "module", "function", "macro",
  // or "type".
  //
  Symbol symbol = 3;

  // A list of dependencies known to be required to generate a signature for
  // this file.
  //
  repeated Dependency dependencies = 4;
}

message GenerateSignatureResponse {
  oneof response {
    GenerateSignatureSuccessResponse ok = 1;
    GenerateSignatureMissingDepsResponse missing_deps = 3;
  }
}

message GenerateSignatureSuccessResponse {
  // The root of the workspace that was analyzed.
  string workspace_root = 1;

  // The file that the signatures correspod to.
  string file = 2;

  // The symbol within that file that the signatures correspond to.
  Symbol symbol = 3;

  // A non-empty collection of signatures for this file.
  repeated Signature signatures = 4;
}

message GenerateSignatureMissingDepsResponse {
  string workspace_root = 1;
  string file = 2;
  Symbol symbol = 3;

  // The dependencies that were provided for signature generation.
  repeated Dependency dependencies = 4;

  // A non-empty collection of requirements. These specify new dependencies
  // that are needed to generate the signature.
  //
  repeated Requirement requirements = 5;
}

