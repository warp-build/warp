syntax = "proto3";
package build.warp.tricorder;

import "schemas/build/warp/common.proto";

// A TricorderService is a repository and code analysis service created for a
// specific language ecosystem that will be started and managed from within
// Warp. It helps Warp understand how an ecosystem works.
//
service TricorderService {
  // Returns whether the service is ready to take further requests.
  //
  // Since we are initializing tricorder services from within warp as separate
  // processes, we need a signal to tell us that it is indeed ready.
  //
  rpc EnsureReady(EnsureReadyRequest) returns (EnsureReadyResponse);

  // Generates a Warp Signature for a given source and symbol. This is used
  // during the Target Resolution phase, to understand how to build, test, or
  // run a given target.
  //
  // The entirety of the repository is normally available to this rpc, but the
  // signature is expected to correspond to a single path, be it a file or a
  // directory.
  //
  // A list of dependencies will be provided to facilitate the analysis of code
  // in case that paths to 3rd party dependencies are required. For example, in
  // languages with preprocessors that require the inclusion of header files,
  // this list of dependencies will include information about the paths where
  // those header files may reside.
  //
  rpc GenerateSignature(GenerateSignatureRequest) returns (GenerateSignatureResponse);
  
  rpc GetAst(GetAstRequest) returns (GetAstResponse);

  rpc PrepareDependency(PrepareDependencyRequest) returns (PrepareDependencyResponse);
}

message EnsureReadyRequest {}
message EnsureReadyResponse {}

message GenerateSignatureRequest {
  // The root of the workspace that the Tricorder will be analyzing.
  //
  string workspace_root = 1;

  // The path to the file that this signature corresponds to. This path will be
  // relative to the `workspace_root`.
  //
  string file = 2;

  // The symbol that the generated signature should include.
  //
  // This symbol is a string that matches a value that is semantically
  // meaningful in the context of the tricorder's language. For example, in the
  // Erlang tricorder we expect a symbol to be "module", "function", "macro",
  // or "type".
  //
  Symbol symbol = 3;

  // A list of dependencies known to be required to generate a signature for
  // this file.
  //
  repeated Dependency dependencies = 4;

  TestMatcher test_matcher = 5;
  Goal goal = 6;
}

message GenerateSignatureResponse {
  oneof response {
    GenerateSignatureSuccessResponse ok = 1;
    GenerateSignatureMissingDepsResponse missing_deps = 3;
  }
}

message GenerateSignatureSuccessResponse {
  // The root of the workspace that was analyzed.
  string workspace_root = 1;

  // The file that the signatures correspod to.
  string file = 2;

  // The symbol within that file that the signatures correspond to.
  Symbol symbol = 3;

  // A non-empty collection of signatures for this file.
  repeated Signature signatures = 4;
}

message GenerateSignatureMissingDepsResponse {
  string workspace_root = 1;
  string file = 2;
  Symbol symbol = 3;

  // The dependencies that were provided for signature generation.
  repeated Dependency dependencies = 4;

  // A non-empty collection of requirements. These specify new dependencies
  // that are needed to generate the signature.
  //
  repeated Requirement requirements = 5;
}

message GetAstRequest {
  string file = 1;
  Symbol symbol = 2;
  repeated Dependency dependencies = 3;
}

message GetAstResponse {
  oneof response {
    GetAstSuccessResponse ok = 1;
    GetAstMissingDepsResponse missing_deps = 3;
  }
}

message GetAstMissingDepsResponse {
  string file = 1;
  Symbol symbol = 2;
  repeated Requirement dependencies = 3;
}

message GetAstSuccessResponse {
  string file = 1;
  Symbol symbol = 2;
  string source = 3;
  string ast = 4;
}


message PrepareDependencyRequest {
  // The root directory where this package is located.
  string package_root = 1;
 
  // The URL that this package was downloded from.
  string url = 2;

  // The name of the dependency to preprae.
  string package_name = 3;
}

message PrepareDependencyResponse {
  repeated Signature signatures = 2;
}
