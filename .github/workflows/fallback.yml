name: Fallback Release Workflow

on:
  - push
  - pull_request

jobs:
  create_draft_release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}

    steps:
      - name: Create draft release on tags
        id: create_draft_release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    needs: create_draft_release

    strategy:
      fail-fast: false
      matrix:
        rust_toolchain: [stable]
        deno_toolchain: ["v1.25"]
        otp_version: ["25.3"]
        elixir_version: ["1.14"]
        rebar3_version: ["3.14.1"]

        include:
          # macos targets
          - target: x86_64-apple-darwin
            os: macos-latest

          - target: aarch64-apple-darwin
            os: macos-latest

          # linux builds
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    env:
      OS: ${{ matrix.os }}
      RUST_TOOLCHAIN: ${{ matrix.rust_toolchain }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch tags
        id: tag
        run: git fetch --tags --force

      - name: Cached Infra
        uses: actions/cache@v2
        env:
          cache-name: cached-cargo
        with:
          path: |
           ~/.cargo
           target
           C:\cygwin
          key: v${{ secrets.CACHE_VERSION }}-${{ matrix.os }}-${{ matrix.target }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            v${{ secrets.CACHE_VERSION }}-${{ matrix.os }}-${{ matrix.target }}-${{ env.cache-name }}-
            v${{ secrets.CACHE_VERSION }}-${{ matrix.os }}-${{ matrix.target }}-

      - name: Use Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          target: ${{ matrix.target }}

      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno_toolchain }}

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp_version }}
          elixir-version: ${{ matrix.elixir_version }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions-bot@users.noreply.github.com

      - name: Define env (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: echo "GITHUB_TAG=$(git describe --always --tags)" >> $GITHUB_ENV

      - name: Setup Rust targets
        run: make setup

      - name: Run code checks
        if: ${{ success() }}
        run: make check

      - name: Build project
        run: make build

      - name: Run tests
        run: make test

      - name: Create release archive (Unix)
        if: ${{ success() && runner.os != 'Windows' }}
        run: make release

      - name: Upload Warp build artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          path: release.tar.gz
          name: warp-${{ env.GITHUB_TAG }}-${{ matrix.target }}.tar.gz
          if-no-files-found: error

      - name: Upload Warp release tarball
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        id: upload-warp-release-tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: release.tar.gz
          asset_name: warp-${{ env.GITHUB_TAG }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/zip
